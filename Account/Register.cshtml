@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Sign Up";

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    var firstName = "";
    var lastName ="";
    var hometown = "";
    var homestate = "";
    var education = "";
    var userInfo = "";

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));
    Validation.RequireField("firstName", "Enter your first name.");
    Validation.RequireField("lastName", "Enter your last name.");
    Validation.RequireField("hometown", "Enter your hometown.");
    Validation.RequireField("homestate", "Enter your state.");
    Validation.RequireField("userInfo", "Enter a short bio.");
    Validation.Add("userInfo", Validator.StringLength(
            maxLength: 200,
            minLength: 1,
            errorMessage: "Bio must be < 200 characters.") );

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        firstName = Request.Form["firstName"];
        lastName = Request.Form["lastName"];
        hometown = Request.Form["hometown"];
        homestate = Request.Form["homestate"];
        education = Request.Form["education"];
        userInfo = Request.Form["userInfo"];
        

        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("GoodStarter");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email, FirstName, LastName, Hometown, Homestate, Education, UserInfo) VALUES (@0, @1, @2, @3, @4, @5, @6)", email, firstName, lastName, hometown, homestate, education, userInfo);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<div class="row" >
<div class="col-md-8 col-md-offset-2">
<hgroup class="title">
    <h1>@Page.Title</h1>
    <h2>Create an account and start doing good.</h2>
</hgroup>

<form method="post" >
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset >
            <div class="form-group email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}><span class="glyphicon glyphicon-envelope"></span> Email </label>
                <input type="text" id="email" name="email" class="form-control" value="@email" @Validation.For("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </div>
            <div class="form-group password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-asterisk"></span> Password</label>
                <input type="password" id="password" name="password" class="form-control" @Validation.For("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
            </div>
            <div class="form-group confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-lock"></span> Confirm Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword"class="form-control" @Validation.For("confirmPassword") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
            </div>
            <div class="form-group name row">
                <div class="col-md-6">
                    <label for="firstName" @if(!ModelState.IsValidField("firstName")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-user"></span> First Name</label>
                    <input type="text" id="firstName" name="firstName"class="form-control" @Validation.For("firstName") />
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("firstName")
                </div>
                <div class="col-md-6">
                    <label for="lastName" @if(!ModelState.IsValidField("lastName")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-user"></span> Last Name</label>
                    <input type="text" id="lastName" name="lastName"class="form-control" @Validation.For("lastName") />
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("lastName")
                </div>

            </div>

            <div class="form-group hometown-state row">
                <div class="col-md-6">
                    <label for="hometown" @if(!ModelState.IsValidField("hometown")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-home"></span> Hometown</label>
                    <input type="text" id="hometown" name="hometown"class="form-control" @Validation.For("hometown") />
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("hometown")
                </div>
                <div class="col-md-6">
                    <label for="homestate" @if(!ModelState.IsValidField("homestate")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-globe"></span> State </label>
                    <input type="text" id="homestate" name="homestate"class="form-control" data-provide="typeahead" @Validation.For("homestate") autocomplete="off"/>
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("homestate")
                </div>

            </div>

            <div class="form-group education">
                <label for="education" @if(!ModelState.IsValidField("education")){<text>class="error-label"</text>}><span class="glyphicon glyphicon-education"></span> Education </label>
                <input type="text" id="education" name="education" class="form-control" value="@email" @Validation.For("education") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("education")
            </div>

            <div class="form-group user-info">
                <label for="userInfo" @if(!ModelState.IsValidField("userInfo")) {<text>class="error-label"</text>}><span class="glyphicon glyphicon-book"></span> Bio</label>
                <textarea id="userInfo" name="userInfo"class="form-control" @Validation.For("userInfo") > </textarea>
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("userInfo")
            </div>

            <!--<li class="recaptcha">
                <div class="message-info">
                    <p>
                        To enable CAPTCHA verification, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">install the 
                        ASP.NET Web Helpers Library</a> and uncomment ReCaptcha.GetHtml and replace 'PUBLIC_KEY'
                        with your public key. At the top of this page, uncomment ReCaptcha. Validate and
                        replace 'PRIVATE_KEY' with your private key.
                        Register for reCAPTCHA keys at <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div>
                @*
                @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @Html.ValidationMessage("recaptcha")
                *@
            </li>
            -->
        <div class="row" > 
            <input type="submit" class="btn btn-sm btn-primary btn-block col-xs-12 sign-up" value="Sign Up" />
        </div>
    </fieldset>
</form>
</div>
</div>